# -*- coding: utf-8 -*-
"""102203529.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dBRUg1ZSildVtvFyDBC-d6qsiKd4WZzo
"""

import pandas as pd
import numpy as np

def calculate_topsis(input_file, weights, impacts, output_file):
    try:
        # Load the input CSV file
        dataset = pd.read_csv("/content/102203529-data (2).csv")

        # Ensure the dataset contains at least 3 columns
        if dataset.shape[1] < 3:
            raise ValueError("The input file must contain at least three columns.")

        # Separate identifiers and numeric values
        identifiers = dataset.iloc[:, 0]  # First column (non-numeric)
        criteria_matrix = dataset.iloc[:, 1:]  # Remaining columns (numeric)

        # Validate that all remaining columns contain numeric data
        if not np.issubdtype(criteria_matrix.dtypes.values[0], np.number):
            raise ValueError("Columns other than the first must contain numeric data.")

        # Parse weights and impacts
        weight_list = [float(w) for w in weights.split(",")]
        impact_list = impacts.split(",")

        # Validate weights and impacts
        if len(weight_list) != criteria_matrix.shape[1] or len(impact_list) != criteria_matrix.shape[1]:
            raise ValueError("The number of weights and impacts must match the number of numeric columns.")

        if not all(impact in ["+", "-"] for impact in impact_list):
            raise ValueError("Impacts must be either '+' or '-'.")

        # Normalize the criteria matrix
        normalized_matrix = criteria_matrix / np.sqrt((criteria_matrix**2).sum(axis=0))

        # Apply weights to the normalized matrix
        weighted_matrix = normalized_matrix * weight_list

        # Determine ideal best and ideal worst values
        ideal_best = [
            weighted_matrix[col].max() if impact == "+" else weighted_matrix[col].min()
            for col, impact in zip(weighted_matrix.columns, impact_list)
        ]
        ideal_worst = [
            weighted_matrix[col].min() if impact == "+" else weighted_matrix[col].max()
            for col, impact in zip(weighted_matrix.columns, impact_list)
        ]

        # Compute distances from ideal best and worst
        distances_best = np.sqrt(((weighted_matrix - ideal_best) ** 2).sum(axis=1))
        distances_worst = np.sqrt(((weighted_matrix - ideal_worst) ** 2).sum(axis=1))

        # Calculate TOPSIS scores
        scores = distances_worst / (distances_best + distances_worst)

        # Rank the alternatives based on scores
        rankings = scores.argsort()[::-1] + 1

        # Append scores and rankings to the dataset
        dataset["Topsis Score"] = scores
        dataset["Rank"] = rankings

        # Save the results to the specified output file
        dataset.to_csv(output_file, index=False)
        print(f"Results have been successfully saved to {output_file}.")

    except FileNotFoundError:
        print("Error: The specified input file could not be found.")
    except ValueError as e:
        print(f"Input Error: {e}")
    except Exception as e:
        print(f"Unexpected Error: {e}")

# Example usage
input_file = "102203529-data(2).csv"  # Specify the input CSV file
output_file = "102203529-results.csv"  # Specify the output CSV file
weights = "1,1,1,1,1"  # Define weights for criteria
impacts = "+,+,-,+,+"  # Define impacts for criteria

calculate_topsis(input_file, weights, impacts, output_file)